/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package learning;

import java.util.Arrays;
import java.util.List;

import io.reactivex.Observable;
import io.reactivex.Observer;
import io.reactivex.observers.ResourceObserver;


public class App {

    public static void simpleObservable() {
        Observable<Integer> source = Observable.just(1,2,3,4,5);  // nothing is pushed yet
        source.subscribe(System.out::println, Throwable::printStackTrace, () -> System.out.println("Done!"));
    }

    public static void explicitObserver() {
        Observable<Integer> source = Observable.just(1,2,3,4,5);

        Observer<Integer> subscriber = new ResourceObserver<Integer>() {
            @Override
            public void onComplete() {
                System.out.println("Done!");
            }

			@Override
			public void onNext(Integer t) {
                System.out.println(t);
			}

			@Override
			public void onError(Throwable e) {
                e.printStackTrace();				
			}
        };

        source.subscribe(subscriber);
    }

    public static void rangeDemo() {
        Observable<Integer> source = Observable.range(1,20);
        source.subscribe(System.out::println);
    }

    public static void fromIterableDemo() {
        List<Integer> list = Arrays.asList(5,4,3,2,1,0);
        Observable<Integer> source = Observable.fromIterable(list);
        source.subscribe(System.out::println);
    }

    public static void mapDemo() {
        Observable<String> source = Observable.just("Alpha", "Beta", "Gamma", "Delta", "Epsilon");
        // source.map(s -> s.length()).subscribe(System.out::println);
        Observable<Integer> lengths = source.map(String::length);

        lengths.subscribe(System.out::println);

        Observable.just("some","set","of","strings")
            .map(String::length)
            .subscribe(System.out::println);
    }

    public static void filterDemo() {
        Observable.just("here", "is", "some","set","of","strings")
            .filter(s -> s.length() > 3)
            .subscribe(System.out::println);
    }

    public static void distinctDemo() {
        Observable.just("here","is","is","a","set","of","strings","with","with","duplicates")
            .distinct()
            .subscribe(i -> System.out.print(i + " "));
        
        System.out.println();

        Observable.just("here","is","is","a","set","of","strings","with","with","duplicates")
            .distinct(String::length)  // distinct based on some attribute
            .subscribe(i -> System.out.print(i + " "));
    }

    public static void takeDemo() {
        Observable.just("Alpha", "Beta", "Gamma", "Delta", "Epsilon")
            .take(3)
            .subscribe(System.out::println);
    }

    public static void takeWhileDemo() {
        Observable.just("Alpha", "Beta", "Gamma", "Delta", "Epsilon")
            .takeWhile(s -> !s.startsWith("D"))
            .subscribe(System.out::println);
    }

    public static void main(String[] args) {
        // simpleObservable();
        // explicitObserver();
        // rangeDemo();
        // fromIterableDemo();
        // mapDemo();
        // filterDemo();
        // distinctDemo();
        // takeDemo();
        takeWhileDemo();
    }
}
